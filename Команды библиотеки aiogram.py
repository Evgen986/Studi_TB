import aiogram  # Импортирование библиотеки

# Bot - базовый бот класс бибилотеки
# Dispatcher - класс отвечающий за обработку сообщений
#
#
#
#   ПРОСЛУШИВАНИЕ ЧАТА
#
# @dip.message_handler() -  прослушивает чат и ожидает получения сообщения после должна идти функция,
#                           в аргумент можно прописать (commands=['какая-то команда(без слеша)']) для считывания
#                           команд, если не указывать аргументов принимает все подряд, нужна конструкция if-elif
#                           которая обработает сообщение
#
#
# async def echo(message: types.Message): - асинхорнная функция обработки полученного сообщения, явно прописанный тип
#                                           принимаемого аргумента позволят пользовать автозаполнением
#
#
#   ОБРАБОТКА ПОЛЧЕННЫХ СООБЩЕНИЙ
#
# обращение к message
# message.answer(text=message.text) -   отвечает на полученное сообщение в аргумент может принимать как текст так и
#                                       переменные, сама подтягивает id чата с которого получено сообщение
#                                       к тексту можно конкатенацией прилепить эмоджи (скопировав его с ТГ)
#       В качестве не обязательного агрумента может принимать:
#       - parse_mode="HTML" -   отправляемое ботом сообщение в чат будет обработано, как HTML сообщение (можно выделить
#                               крусивом <em>нужный текст</em>, жирным <b>нужный текст</b> и т.д.)
#       - reply_markup=(имя клавиатуры) - включает для пользователя ранее созданую клавиатуру
#
# await message.reply(text=message.text) -  отвечает на полученное сообщение, показывая сообщение пользователя перед
#                                           ответом
# message.delete() - удаляет полученное от пользователя сообщение
#
# обращение к bot
# bot.send_sticker(message.chat.id, sticker="id") - отправляет в чат стикер в качестве аргументов принимает:
#               message.chat(или from_user).id - если chat.id то это id чата в который нужно отправить стикер,
#                                                если from_user.id то это id пользователя (будет отправлено в личку)
#                                                можно получить из сообщения
#               sticker="id" - команда вставить стиккер id - можно получить у ТГ-бота Get Sticker ID (боту нужно
#                              отправить картинку, в ответ он пришлет id стикера)
# bot.send_photo(chat.id, фото) - отправляет фотографию пользователю, в качестве аргументов имеет:
#                                 chat.id - id куда нужно отправлять фотографию
#                                 фото - файл или интернет адрес фотографии, которую нужно отправить
# bot.send_location(chat.id, latitude, longitude) - отправляет местоположение пользователю, в качестве аргументов имеет:
#                                 chat.id - id куда нужно отправлять фотографию
#                                 latitude - широта
#                                 longitude - долгота
# bot.send_message(chat.id, сообщение) - отправляет сообщение в указанный чат ОТЛИЧИЕ ОТ MESSAGE.ANSWER можно указать
#                                        в какой чат отправлять: message.chat.id отправит в тот чат от куда пришло
#                                        сообщение, message.from_user.id отправит сообщение в личку пользователю,
#                                        в качестве аргументов имеет:
#                                        chat.id - id куда нужно отправлять фотографию
#                                        сообщение - то что нужно отправить
#

#   СОЗДАНИЕ И РАБОТА С КЛАВИАТУРОЙ
# Для создания клавиатуры используются следующие класы входящие в состав aiogram.types:
#       - ReplyKeyboardMarkup - каждая встраиваемая в диалог клавиатура является экземпляром данного класса и
#                               содержит внутри себя заданное нами число кнопок;
#                               Возвращает объект клавиатуры которую мы можем использовать в приложении. Может иметь
#                               следующие необязательные аргументы:
#           - resize_keyboard=boolean - принимает булево значение. Если True - клавиатура подстраивается под размеры
#                                       экрана. False - не подстраивается.
#           - on_time_keyboard=boolean - принимает булево значение. Если True - клавиатура сворачивается (НЕ
#                                        ЗАКРЫВАЕТСЯ) после выбора пользователя.
#       - KeyboardButton -  класс в котором устанавливается каждая кнопка в которой указывается конкретная опция,
#                           которую может выполнить пользователь;
#                           Принимает аргумент:
#           - text=str - принимает строку. Значение данного аргумента будет отправляться боту при нажатии кнопки.
#       - ReplyKeyboardRemove - класс который используется для закрытия клавиатуры в диалоге с пользователем;
#                               Может иметь не обязательный аргумент:
#           -remove_keyboard=boolean - По умолчанию имеет значение True, что приводит к закрытию клавиатуры.
#       ПОРЯДОК СОЗДАНИЯ КЛАВИАТУРЫ
#   1. Импортируем из aiogram.types классы:
#       - ReplyKeyboardMarkup
#       - KeyboardButton
#       - ReplyKeyboardRemove
#   2. Создаем объект клавиатуры: (ОДИН ОБЪЕКТ -> ОДНА КЛАВИАТУРА)
#       kb_help = ReplyKeyboardMarkup(resize_keyboard=boolean, on_time_keyboard=boolean)
#   3. Создаем кнопки клавиатуры:
#       b1 = KeyboardButton('/photo')
#       b2 = KeyboardButton('/description')
#   4. Привязываем созданные кнопки к клавиатуре:
#       kb_help.add(b1).insert(b2)
#           - add - создает новый ряд кнопок
#           - insert - добавляет к существующему ряду кнопку
#   5. В "хэндлере" в качестве дополнительного аргумента в функции ответа пользователю укаываем
#       reply_markup=(имя клавиатуры)
#       Пример:
#       @dp.message_handler(commands=['help'])
#       async def help_command(message: types.Message):
#           await bot.send_message(message.from_user.id, HELP_COMMAND, parse_mode='HTML', reply_markup=kb_help)
#           await message.delete()
#       Если клавиатуру нужно полностью убрать после использования, то в следующем блоке кода который будет
#       работать в аргумент reply_markup= нужно присвоить класс ReplyKeyboardRemove.
#
#    INLINE КЛАВИАТУРА
# Помогает реализовать функционал полноценной клавиатуры, добавить опции выбора, создать некоторую простую настройку
# для пользователя в пределах бота. Привязывается к какому-то конкретному сообщению и следует за ним. Способна
# обновлять свое содержимое.
#
# InlineKeyboardMarkup - класс используемый для создания inline клавиатуры.
#                        Возвращает объект inline клавиатуры, которую можно использовать в приложении.
#                        Имеет не обязательный аргумент:
#       -row_width=int - аргумет определяющий ширину строки клавиатуры (если экран не позволяет разместить кол-во
#                        кнопок, ряд будет переноситься на следующий ряд)
# InlineKeyboardButton - класс, который позволят создавать экземпляр какой-то конкретной кнопки на inline клавиатуре.
#                        Имеет обязательный аргумент text и множество не обязательных аргументов, каждый из которых
#                        отвечает за определенный функционал:
#       - text=str - (обязательный аргумент) текст метки на кнопке
#       - url=str - url адрес, который будет открыт при нажатии
#       - callback_data=str - данные, которые будут отправлены в запросе обратного вызова боту.
#       https://core.telegram.org/bots/api#inlinekeyboardbutton - описание доступных аргументов
# имя_клавиатуры.add(b1,...,bn) - метод добавления кнопок, принимает несколько кнопок одновременно, выстраивает их в
#                                 ряд, в отличии от простой клавиатуры нет необходимости использовать insert()
#   СОЗДАЕТСЯ ПО АНАЛОГИИ С ПРОСТОЙ КЛАВИАТУРОЙ



#   УПРАВЛЯЮЩИЕ КОНСТРУКЦИ
# executor.start_polling(dip) - запускает бот в непрерывную работу в качестве аргументов принимает:
#                     dip - переменная объекта диспетчера
#                     on_startup=имя функции - выполнение функции при запуске программы, функция котороая должна быть
#                                              выполнена пишется в начале программы и В АРГУМЕНТЕ иметь (_)
#                     skip_updates - принимает True/False, определяет будет ли бот отвечать на поступавшие сообщения
#                                    пока бот был офлайн. False - отвечает, True - нет
